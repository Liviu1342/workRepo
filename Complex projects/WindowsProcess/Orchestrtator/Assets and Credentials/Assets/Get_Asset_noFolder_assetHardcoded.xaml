<Activity x:Class="Get_Asset_withFolder" this:Get_Asset_withFolder.assetName="test_asset_1" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=System.Private.CoreLib" xmlns:this="clr-namespace:" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="assetName" Type="InArgument(x:String)" />
    <x:Property Name="assetValue_Obj" Type="OutArgument(x:Object)" />
    <x:Property Name="isFolderSpecified" Type="InArgument(x:Boolean)" />
    <x:Property Name="isFolderHardcoded" Type="InArgument(x:Boolean)" />
    <x:Property Name="isAssetHardcoded" Type="InArgument(x:Boolean)" />
    <x:Property Name="assetValue_String" Type="OutArgument(x:String)" />
    <x:Property Name="orchFolder" Type="InArgument(x:String)" />
  </x:Members>
  <VisualBasic.Settings>
    <x:Null />
  </VisualBasic.Settings>
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>GlobalVariablesNamespace</x:String>
      <x:String>GlobalConstantsNamespace</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="38">
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Collections</AssemblyReference>
      <AssemblyReference>System.ComponentModel</AssemblyReference>
      <AssemblyReference>System.ComponentModel.TypeConverter</AssemblyReference>
      <AssemblyReference>System.Console</AssemblyReference>
      <AssemblyReference>System.Linq</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.ObjectModel</AssemblyReference>
      <AssemblyReference>System.Private.CoreLib</AssemblyReference>
      <AssemblyReference>System.Private.Uri</AssemblyReference>
      <AssemblyReference>System.Reflection.DispatchProxy</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.Studio.Constants</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Workflow</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence DisplayName="Get_Asset_withFolder">
    <If Condition="[isFolderSpecified]">
      <If.Then>
        <Sequence>
          <If Condition="[isFolderHardcoded]">
            <If.Then>
              <Sequence>
                <If Condition="[isAssetHardcoded]">
                  <If.Then>
                    <Sequence>
                      <ui:GetRobotAsset AssetName="shared_asset_1" CacheStrategy="None" DisplayName="Get Asset" FolderPath="Shared">
                        <ui:GetRobotAsset.TimeoutMS>
                          <InArgument x:TypeArguments="x:Int32" />
                        </ui:GetRobotAsset.TimeoutMS>
                        <ui:GetRobotAsset.Value>
                          <OutArgument x:TypeArguments="x:String" />
                        </ui:GetRobotAsset.Value>
                      </ui:GetRobotAsset>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence>
                      <ui:GetRobotAsset AssetName="[assetName]" CacheStrategy="None" DisplayName="Get Asset" FolderPath="test">
                        <ui:GetRobotAsset.TimeoutMS>
                          <InArgument x:TypeArguments="x:Int32" />
                        </ui:GetRobotAsset.TimeoutMS>
                        <ui:GetRobotAsset.Value>
                          <OutArgument x:TypeArguments="x:Object">[assetValue_Obj]</OutArgument>
                        </ui:GetRobotAsset.Value>
                      </ui:GetRobotAsset>
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence>
                <If Condition="[isAssetHardcoded]">
                  <If.Then>
                    <Sequence>
                      <ui:GetRobotAsset AssetName="test_new_asset" CacheStrategy="None" DisplayName="Get Asset" FolderPath="[orchFolder]">
                        <ui:GetRobotAsset.TimeoutMS>
                          <InArgument x:TypeArguments="x:Int32" />
                        </ui:GetRobotAsset.TimeoutMS>
                        <ui:GetRobotAsset.Value>
                          <OutArgument x:TypeArguments="x:String" />
                        </ui:GetRobotAsset.Value>
                      </ui:GetRobotAsset>
                    </Sequence>
                  </If.Then>
                  <If.Else>
                    <Sequence>
                      <ui:GetRobotAsset AssetName="[assetName]" CacheStrategy="None" DisplayName="Get Asset" FolderPath="[orchFolder]">
                        <ui:GetRobotAsset.TimeoutMS>
                          <InArgument x:TypeArguments="x:Int32" />
                        </ui:GetRobotAsset.TimeoutMS>
                        <ui:GetRobotAsset.Value>
                          <OutArgument x:TypeArguments="x:Object">[assetValue_Obj]</OutArgument>
                        </ui:GetRobotAsset.Value>
                      </ui:GetRobotAsset>
                    </Sequence>
                  </If.Else>
                </If>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence>
          <If Condition="[isAssetHardcoded]">
            <If.Then>
              <Sequence>
                <ui:GetRobotAsset AssetName="test_new_asset" CacheStrategy="None" DisplayName="Get Asset">
                  <ui:GetRobotAsset.TimeoutMS>
                    <InArgument x:TypeArguments="x:Int32" />
                  </ui:GetRobotAsset.TimeoutMS>
                  <ui:GetRobotAsset.Value>
                    <OutArgument x:TypeArguments="x:String" />
                  </ui:GetRobotAsset.Value>
                </ui:GetRobotAsset>
              </Sequence>
            </If.Then>
            <If.Else>
              <Sequence>
                <ui:GetRobotAsset AssetName="[assetName]" CacheStrategy="None" DisplayName="Get Asset">
                  <ui:GetRobotAsset.TimeoutMS>
                    <InArgument x:TypeArguments="x:Int32" />
                  </ui:GetRobotAsset.TimeoutMS>
                  <ui:GetRobotAsset.Value>
                    <OutArgument x:TypeArguments="x:Object">[assetValue_Obj]</OutArgument>
                  </ui:GetRobotAsset.Value>
                </ui:GetRobotAsset>
              </Sequence>
            </If.Else>
          </If>
        </Sequence>
      </If.Else>
    </If>
    <If Condition="[isFolderSpecified and (not isAssetHardcoded)]">
      <If.Then>
        <Sequence>
          <ui:LogMessage DisplayName="Log Message" Level="Warn" Message="[assetValue_Obj]" />
        </Sequence>
      </If.Then>
      <If.Else>
        <Sequence>
          <ui:LogMessage DisplayName="Log Message" Level="Warn" Message="[assetValue_String]" />
        </Sequence>
      </If.Else>
    </If>
  </Sequence>
</Activity>